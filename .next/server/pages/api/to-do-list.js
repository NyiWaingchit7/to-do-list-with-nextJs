"use strict";(()=>{var e={};e.id=417,e.ids=[417],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},188:(e,t,s)=>{s.r(t),s.d(t,{config:()=>l,default:()=>o,routeModule:()=>f});var i={};s.r(i),s.d(i,{default:()=>handler});var a=s(1802),r=s(7153),d=s(6249);let u=require("@prisma/client"),n=new u.PrismaClient;async function handler(e,t){let s=e.method;if("GET"===s){let s=Number(e.query.id);if(s){console.log(s);let e=await n.toDoList.findFirst({where:{id:s}});return t.status(200).json({data:e})}{let e=await n.toDoList.findMany({orderBy:{id:"asc"}});return t.status(200).json({data:e})}}if("POST"===s){let{description:s}=e.body;if(!s)return t.status(405).send("bad request");let i=await n.toDoList.create({data:{description:s}});return t.status(200).json({data:i})}if("PUT"===s){let{description:s}=e.body,i=Number(e.query.id);if(!s)return t.status(405).send("bad request");let a=await n.toDoList.findFirst({where:{id:i}});if(!a)return t.status(405).send("this stuff could not be found");let r=await n.toDoList.update({data:{description:s},where:{id:i}});return t.status(200).json({data:r})}if("DELETE"===s){let s=Number(e.query.id),i=await n.toDoList.findFirst({where:{id:s}});return i?(await n.toDoList.delete({where:{id:s}}),t.status(200).send("Deleted successfully")):t.status(405).send("this stuff could not be found")}t.send("bad method")}let o=(0,d.l)(i,"default"),l=(0,d.l)(i,"config"),f=new a.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/to-do-list",pathname:"/api/to-do-list",bundlePath:"",filename:""},userland:i})}};var t=require("../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[222],()=>__webpack_exec__(188));module.exports=s})();